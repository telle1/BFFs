[{"/Users/tiffanyyelle/src/Project3/client/src/index.js":"1","/Users/tiffanyyelle/src/Project3/client/src/reportWebVitals.js":"2","/Users/tiffanyyelle/src/Project3/client/src/App.js":"3","/Users/tiffanyyelle/src/Project3/client/src/components/Hero/hero.js":"4","/Users/tiffanyyelle/src/Project3/client/src/components/Invite/invite.js":"5","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/allcards.js":"6","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/card.js":"7","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/question/question.js":"8","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/question/questionDropdown.js":"9","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/answer/ansOption.js":"10","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/answer/addAns.js":"11","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/take_quiz/quizTakerCards.js":"12","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/take_quiz/quizTakerName.js":"13"},{"size":500,"mtime":1607375890745,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1607375890747,"results":"16","hashOfConfig":"15"},{"size":9513,"mtime":1607539060345,"results":"17","hashOfConfig":"15"},{"size":1235,"mtime":1607490943814,"results":"18","hashOfConfig":"15"},{"size":415,"mtime":1607544591872,"results":"19","hashOfConfig":"15"},{"size":3895,"mtime":1607545625350,"results":"20","hashOfConfig":"15"},{"size":3970,"mtime":1607495690385,"results":"21","hashOfConfig":"15"},{"size":599,"mtime":1607460561643,"results":"22","hashOfConfig":"15"},{"size":1208,"mtime":1607460606840,"results":"23","hashOfConfig":"15"},{"size":2094,"mtime":1607475106785,"results":"24","hashOfConfig":"15"},{"size":346,"mtime":1607459508402,"results":"25","hashOfConfig":"15"},{"size":5050,"mtime":1607545912143,"results":"26","hashOfConfig":"15"},{"size":942,"mtime":1607544085528,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"2kkxo5",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/tiffanyyelle/src/Project3/client/src/index.js",[],["60","61"],"/Users/tiffanyyelle/src/Project3/client/src/reportWebVitals.js",[],"/Users/tiffanyyelle/src/Project3/client/src/App.js",["62"],"import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Hero from './components/Hero/hero.js'\nimport Invite from './components/Invite/invite.js'\nimport AllCards from './components/Cards/create_quiz/allcards.js'\nimport QuizTakerName from './components/Cards/take_quiz/quizTakerName.js'\nimport QuizTakerCards from './components/Cards/take_quiz/quizTakerCards.js'\n\n\nfunction App() {\n\n  return (\n  <Router>\n    <Switch>\n    <Route exact path=\"/\" component={Hero}></Route>\n    <Route path=\"/invite\" component={Invite}></Route>\n    <Route path=\"/create-quiz\" component={AllCards}></Route>\n    <Route path=\"/take-quiz/:quizId\" component={QuizTakerName}></Route>\n    </Switch>\n  </Router>\n  )\n}\n\n\n// function AllCards() {\n//   const premadeQuestions = [\n//     { question: 'What is my favorite drink?', answer: ['a', 'b', 'c', 'd'] },\n//     { question: 'Where was my best vacation?', answer: ['e', 'f', 'g', 'h'] },\n//     {\n//       question: 'What was the name of my favorite stuffed animal?',\n//       answer: ['i', 'j', 'k', 'l'],\n//     },\n//     { question: 'Where was my childhood home?', answer: ['m', 'n', 'o', 'p'] },\n//     { question: 'Where was my childhood home?', answer: ['m', 'n', 'o', 'p'] },\n//     { question: 'Where was my childhood home?', answer: ['m', 'n', 'o', 'p'] },\n//     { question: 'Where was my childhood home?', answer: ['m', 'n', 'o', 'p'] },\n//     { question: 'Where was my childhood home?', answer: ['m', 'n', 'o', 'p'] },\n//     { question: 'Where was my childhood home?', answer: ['m', 'n', 'o', 'p'] },\n//     { question: 'Where was my childhood home?', answer: ['m', 'n', 'o', 'p'] },\n//   ];\n\n//   const handleQuestionSubmit = (e) => {\n//     e.preventDefault();\n//     console.log('need to also send all the background colors?');\n//     console.log('ALL ANSWERS ARRAY', allQuizAns);\n//   };\n\n//   const [allQuizAns, setAllQuizAns] = useState([]);\n//   console.log('all quiz ansawers', allQuizAns);\n\n//   return (\n//     <QuestionContext.Provider value={{ setAllQuizAns, allQuizAns }}>\n//       <Form onSubmit={handleQuestionSubmit}>\n//         {[\n//           '#FF9AA2',\n//           '#FFB7B2',\n//           '#FFB347',\n//           '#FFDAC1',\n//           '#B5EAD7',\n//           '#E2F0CB',\n//           '#85E3FF',\n//           '#ACE7FF',\n//           '#B28DFF',\n//           '#97A2FF',\n//         ].map((cardColor, i) => (\n//           <Card\n//             key={cardColor}\n//             questionNumber={i + 1}\n//             cardColor={cardColor}\n//             defaultQ={premadeQuestions[i].question}\n//             defaultA={premadeQuestions[i].answer}\n//             premadeQuestions={premadeQuestions}\n//           ></Card>\n//         ))}\n//         <div className= \"d-flex justify-content-center\">\n//         <button type='submit' className='btn btn-secondary'>\n//           Create my quiz!\n//         </button>\n//         </div>\n//       </Form>\n//     </QuestionContext.Provider>\n//   );\n// }\n\n// function Card({\n//   questionNumber,\n//   cardColor,\n//   premadeQuestions,\n//   defaultQ,\n//   defaultA,\n// }) {\n//   const [question, setQuestion] = useState(defaultQ);\n//   const [customQ, setCustomQ] = useState(false);\n//   const [ansOptions, setAnsOptions] = useState(defaultA);\n//   const [bgColor, setBgColor] = useState(cardColor);\n\n//   const changeCardColor = (color) => {\n//     setBgColor(color);\n//   };\n\n//   return (\n//     <Row className='mb-5'>\n//       <Col>\n//         <div className='card' style={{ backgroundColor: bgColor }}>\n//           <div className='card-content'>\n//             <h2 className='font-weight-bold'>QUESTION {questionNumber}</h2>\n//             {/* Question Components */}\n//             <div className='question mb-2'>\n//               {/* Question input field */}\n//               <Question\n//                 question={question}\n//                 setQuestion={setQuestion}\n//                 customQ={customQ}\n//                 setAnsOptions={setAnsOptions}\n//               />\n//               {/* Additional Question Options/Dropdown */}\n//               <QuestionDropdown\n//                 premadeQuestions={premadeQuestions}\n//                 setQuestion={setQuestion}\n//                 setAnsOptions={setAnsOptions}\n//                 setCustomQ={setCustomQ}\n//               />\n//             </div>\n\n//             {/* Answer Components */}\n//             <div>\n//               {/* Answer Options */}\n//               {/* {console.log('LIST OF ANS OPTIONS', ansOptions)} */}\n//               {ansOptions.map((ansOption, i) => (\n//                 <AnsOption\n//                   key={i}\n//                   id={i}\n//                   ansOption={ansOption}\n//                   ansOptions={ansOptions}\n//                   setAnsOptions={setAnsOptions}\n//                   questionNumber={questionNumber}\n//                 />\n//               ))}\n//               {/* Add Answer Option */}\n//               {ansOptions.length < 6 ? (\n//                 <AddAnswer\n//                   ansOptions={ansOptions}\n//                   setAnsOptions={setAnsOptions}\n//                 />\n//               ) : null}\n//             </div>\n\n//             {/* Change card background color */}\n//             <div className='mt-2 d-flex justify-content-center'>\n//               {[\n//                 '#FF9AA2',\n//                 '#FFB7B2',\n//                 '#FFB347',\n//                 '#FFDAC1',\n//                 '#B5EAD7',\n//                 '#E2F0CB',\n//                 '#85E3FF',\n//                 '#ACE7FF',\n//                 '#B28DFF',\n//                 '#97A2FF',\n//               ].map((color) => (\n//                 <div\n//                   className='btn colors mr-1'\n//                   style={{ backgroundColor: color }}\n//                   onClick={() => changeCardColor(color)}\n//                 ></div>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//       </Col>\n//     </Row>\n//   );\n// }\n\n// function Question({ question, setQuestion, customQ }) {\n//   return (\n//     <React.Fragment>\n//       {customQ ? (\n//         <textarea\n//           rows='3'\n//           className='text-area'\n//           placeholder='Custom question here'\n//           value={question}\n//           onChange={(e) => setQuestion(e.target.value)}\n//         ></textarea>\n//       ) : (\n//         <textarea\n//           rows='3'\n//           className='text-area'\n//           value={question}\n//           readOnly\n//         ></textarea>\n//       )}\n//     </React.Fragment>\n//   );\n// }\n\n// function QuestionDropdown({\n//   premadeQuestions,\n//   setQuestion,\n//   setAnsOptions,\n//   setCustomQ,\n// }) {\n//   return (\n//     <Dropdown>\n//       <Dropdown.Toggle\n//         variant='secondary'\n//         className='question-dropdown'\n//         id='dropdown-basic'\n//       >\n//         More Questions\n//       </Dropdown.Toggle>\n//       <Dropdown.Menu className='question-dropdown-menu'>\n//         {premadeQuestions.map((premadeQuestion, i) => (\n//           <Dropdown.Item\n//             key={i}\n//             className='premade-question'\n//             onClick={() => {\n//               setQuestion(premadeQuestion.question);\n//               setAnsOptions(premadeQuestion.answer);\n//             }}\n//           >\n//             {premadeQuestion.question}\n//           </Dropdown.Item>\n//         ))}\n//         <Dropdown.Item\n//           onClick={() => {\n//             setQuestion('');\n//             setCustomQ(true);\n//             setAnsOptions(['', '', '', '']);\n//           }}\n//         >\n//           Add custom question\n//         </Dropdown.Item>\n//       </Dropdown.Menu>\n//     </Dropdown>\n//   );\n// }\n\n// function AnsOption({\n//   id,\n//   ansOption,\n//   setAnsOptions,\n//   ansOptions,\n//   questionNumber,\n// }) {\n//   const { setAllQuizAns } = useContext(QuestionContext);\n//   const [ansText, setAnsText] = useState();\n\n//   useEffect(() => {\n//     setAnsText(ansOption);\n//   }, [ansOption]);\n\n//   const rmvAnswer = () => {\n//     const newAnsOptions = ansOptions.filter((ans, i) => i !== id);\n//     setAnsOptions(newAnsOptions);\n//   };\n\n//   return (\n//     <div className='answer-choice d-flex justify-content-center align-items-center'>\n//       <input\n//         type='radio'\n//         id={`choice_${id}`}\n//         name='answer_options'\n//         value={ansText}\n//         className='mr-1'\n//         onClick={() => {\n//           setAllQuizAns((allQuizAns) => [\n//             ...allQuizAns,\n//             { question: questionNumber, answerNum: id + 1 },\n//           ]);\n//         }}\n//         required\n//       />\n//       <label htmlFor='male' className='my-0 mr-2'>\n//         <textarea\n//           rows='2'\n//           className='answer-option'\n//           value={ansText}\n//           onChange={(e) => setAnsText(e.target.value)}\n//         ></textarea>\n//       </label>\n\n//       <button className='btn' onClick={rmvAnswer}>\n//         <i className='fas fa-times' style={{ color: 'white' }}></i>\n//       </button>\n//     </div>\n//   );\n// }\n\n// function AddAnswer({ setAnsOptions, ansOptions }) {\n//   const addAnswerOption = (e) => {\n//     e.preventDefault();\n//     setAnsOptions((ansOptions) => [...ansOptions, '']);\n//   };\n\n//   return (\n//     <button className='btn btn-secondary' onClick={addAnswerOption}>\n//       Add answer option\n//     </button>\n//   );\n// }\n\nexport default App;\n","/Users/tiffanyyelle/src/Project3/client/src/components/Hero/hero.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Invite/invite.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/allcards.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/card.js",["63","64"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport './card.css';\nimport AnsOption from './answer/ansOption';\nimport AddAnswer from './answer/addAns';\nimport Question from './question/question';\nimport QuestionDropdown from './question/questionDropdown';\n\nfunction Card({\n  questionNumber,\n  cardColor,\n  premadeQuestions,\n  defaultQ,\n  defaultA,\n  allQuizAns,\n  setAllQuizAns,\n  quizInfo,\n  setQuizInfo,\n}) {\n  const [question, setQuestion] = useState(defaultQ);\n  const [customQ, setCustomQ] = useState(false);\n  const [ansOptions, setAnsOptions] = useState(defaultA);\n  const [correctAnswer, setCorrectAnswer] = useState(\"\")\n  const [bgColor, setBgColor] = useState(cardColor);\n\n  useEffect(() => {\n    setQuizInfo((quizInfo) => [\n      ...quizInfo,\n      {\n        number: questionNumber,\n        bgColor: bgColor,\n        question: question,\n        correctAnswer: correctAnswer,\n        answerOptions: ansOptions,\n      },\n    ]);\n  }, [bgColor, question, correctAnswer, ansOptions]);\n\n  const changeCardColor = (color) => {\n    setBgColor(color);\n\n    let updateBgColor = quizInfo.map((questionInfo, i) => {\n      if (i + 1 == questionNumber) {\n        return { ...questionInfo, bgColor: bgColor };\n      } else {\n        return questionInfo;\n      }\n    });\n    setQuizInfo(updateBgColor);\n  };\n\n  return (\n    <Row key={questionNumber} className='mb-5'>\n      <Col>\n        <div className='card' style={{ backgroundColor: bgColor }}>\n          <div className='card-content'>\n            <h2 className='font-weight-bold'>QUESTION {questionNumber}</h2>\n            {/* Question Components */}\n            <div className='question mb-2'>\n              {/* Question input field */}\n              <Question\n                question={question}\n                setQuestion={setQuestion}\n                customQ={customQ}\n                setAnsOptions={setAnsOptions}\n              />\n              {/* Additional Question Options/Dropdown */}\n              <QuestionDropdown\n                premadeQuestions={premadeQuestions}\n                setQuestion={setQuestion}\n                setAnsOptions={setAnsOptions}\n                setCustomQ={setCustomQ}\n              />\n            </div>\n\n            {/* Answer Components */}\n            <div>\n              {/* Answer Options */}\n              {/* {console.log('LIST OF ANS OPTIONS', ansOptions)} */}\n              {ansOptions.map((ansOption, i) => (\n                <AnsOption\n                  key={i}\n                  id={i}\n                  ansOption={ansOption}\n                  ansOptions={ansOptions}\n                  setAnsOptions={setAnsOptions}\n                  correctAnswer={correctAnswer}\n                  setCorrectAnswer={setCorrectAnswer}\n                  questionNumber={questionNumber}\n                  allQuizAns={allQuizAns}\n                  setAllQuizAns={setAllQuizAns}\n                />\n              ))}\n              {/* Add Answer Option */}\n              {ansOptions.length < 6 ? (\n                <AddAnswer\n                  ansOptions={ansOptions}\n                  setAnsOptions={setAnsOptions}\n                />\n              ) : null}\n            </div>\n\n            {/* Change card background color */}\n            <div className='mt-2 d-flex justify-content-center'>\n              {[\n                '#FF9AA2',\n                '#FFB7B2',\n                '#FFB347',\n                '#FFDAC1',\n                '#B5EAD7',\n                '#E2F0CB',\n                '#85E3FF',\n                '#ACE7FF',\n                '#B28DFF',\n                '#97A2FF',\n              ].map((color) => (\n                <div\n                  className='btn pick-a-color mr-1'\n                  style={{ backgroundColor: color }}\n                  onClick={() => changeCardColor(color)}\n                ></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </Col>\n    </Row>\n  );\n}\n\nexport default Card;\n","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/question/question.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/question/questionDropdown.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/answer/ansOption.js",["65"],"import React, { useEffect, useState } from 'react';\nimport './ansOption.css'\n\nfunction AnsOption({\n    id,\n    ansOption,\n    setAnsOptions,\n    ansOptions,\n    questionNumber,\n    allQuizAns,\n    correctAnswer,\n    setCorrectAnswer,\n    setAllQuizAns\n  }) {\n\n    const [ansText, setAnsText] = useState();\n    useEffect(() => {\n      setAnsText(ansOption);\n    }, [ansOption]);\n  \n    const rmvAnswer = (e) => {\n      e.preventDefault();\n      const newAnsOptions = ansOptions.filter((ans, i) => i !== id);\n      setAnsOptions(newAnsOptions);\n    };\n  \n    return (\n      <div className='answer-choice d-flex justify-content-center align-items-center'>\n        <input key={id}\n          type='radio'\n          id={id}\n          name='answer_options'\n          value={ansText}\n          className='mr-1'\n          onClick={() =>\n            // (e) => {\n            // setAllQuizAns((allQuizAns) => [\n            //   ...allQuizAns,\n            //   { question: questionNumber, answerNum: id + 1 },\n            // ]);\n            // console.log(id+1, 'ANSWER CHOICE')\n            setCorrectAnswer(id+1)\n            // console.log('WHATS IN CORRECT ASNWER',correctAnswer)\n          }\n          required\n        />\n        <label htmlFor='answer-option' className='my-0 mr-2'>\n          <textarea\n            rows='2'\n            className='answer-option'\n            value={ansText}\n            onChange={(e) => {\n              setAnsText(e.target.value)\n\n              let updatedAnsOptions = ansOptions.map((ansOption,i) => {\n                if (i == id){\n                  console.log('WHTS IN ANS OPTION', ansOption)\n                  return ansOption = e.target.value;\n                } else {\n                  return ansOption\n                }\n              })\n              setAnsOptions(updatedAnsOptions)\n            }} //setAnsOptions(e.target.value)\n          ></textarea>\n        </label>\n  \n        <button className='btn' onClick={rmvAnswer}>\n          <i className='fas fa-times' style={{ color: 'white' }}></i>\n        </button>\n      </div>\n    );\n  }\n\nexport default AnsOption;","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/answer/addAns.js",[],["66","67"],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/take_quiz/quizTakerCards.js",["68","69","70","71"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport './quizTakerCards.css';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\n\nfunction QuizTakerCards({name}) {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [quizCards, setQuizCards] = useState([\n    {\n      number: 1,\n      bgColor: 'pink',\n      question: 'Why do I want to become a programmer?',\n      correctAnswer: 2,\n      answerOptions: ['Money', 'I love problem solving', 'Why not?', 'Uhh...']\n    },\n    {\n      number: 2,\n      bgColor: 'pink2',\n      question: 'What is my favorite subject?',\n      correctAnswer: 2,\n      answerOptions: ['History', 'Computer Science', 'English', 'Biology'] \n    },\n  ]);\n\n  useEffect(() => {\n    const fetchUserCards = async () => {\n      const result = await axios.get('/api/take-quiz/:quizId');\n      // fetch('/api/take-quiz/:quizId')\n      // .then(res => res.json())\n      // .then(data=> console.log(data))\n      console.log('WHATS IN USER CARDS', result.data.test);\n      // setQuizCards(result.data.test)\n    };\n    fetchUserCards();\n    // setQuizCards(getUserCards.data)\n  }, []);\n\n  console.log('WHATS IN SCORE', score);\n\n  return (\n    <Row key={quizCards.questionNumber} className='mb-5 mt-5'>\n        {/* <p>Are you a true friend, {name}? </p> */}\n      <Col>\n        <div\n          className='card'\n          style={{ backgroundColor: quizCards[currentQuestion].bgColor }}\n        >\n          {showScore ? (\n            <h1 className=\"d-flex justify-content-center align-items-center\">Work in progress.... </h1>\n          ) : (\n            <div className='card-content'>\n              <h2 className='font-weight-bold'>\n                QUESTION {quizCards[currentQuestion].number}\n              </h2>\n              {/* Question */}\n              <h4 className='question mb-2'>\n                {quizCards[currentQuestion].question}\n              </h4>\n\n              <div>\n                {/* Answer Options */}\n                {quizCards[currentQuestion].answerOptions.map(\n                  (ansOption, i) => (\n                    <AnsOption\n                      key={i}\n                      id={i}\n                      ansOption={ansOption}\n                      currentQuestion={currentQuestion}\n                      setCurrentQuestion={setCurrentQuestion}\n                      score={score}\n                      quizCards={quizCards}\n                      setShowScore={setShowScore}\n                      setScore={setScore}\n                    />\n                  )\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </Col>\n    </Row>\n  );\n}\n\nfunction AnsOption({\n  ansOption,\n  id,\n  currentQuestion,\n  setCurrentQuestion,\n  quizCards,\n  setShowScore,\n  setScore,\n  score,\n}) {\n  const history = useHistory();\n\n  const [btnColor, setBtnColor] = useState('white');\n  const [letterChoice, setLetterChoice] = useState('');\n  const [letterBgCol, setLetterBgCol] = useState('')\n\n  let numToLetter = {\n    '0': {'letter': 'A', 'bgColor': '#FFB7B2'},\n    '1': {'letter': 'B', 'bgColor': '#FFDAC1'},\n    '2': {'letter': 'C', 'bgColor': '#F8F9CA'},\n    '3': {'letter': 'D', 'bgColor': '#B5EAD7'},\n    '4': {'letter': 'E', 'bgColor': '#C7CEEA'},\n    '5': {'letter': 'F', 'bgColor': '#FF9AA2'},\n  };\n\n  useEffect(() => {\n    setLetterChoice(numToLetter[String(id)].letter);\n    setLetterBgCol(numToLetter[String(id)].bgColor);\n  }, []);\n\n  console.log('LETTER CHOICE', letterChoice);\n\n  const changeQuestion = () => {\n    const nextQuestion = currentQuestion + 1;\n    if (id + 1 == quizCards[currentQuestion].correctAnswer) {\n      console.log('HIHIHIHIHIHI');\n      setScore(score + 1);\n      setBtnColor('#90ee90');\n    } else {\n      setBtnColor('#ff3232');\n      setTimeout(() => {\n        // history.push('/');\n        <p>Work in progess....</p>\n      }, 1000);\n    }\n\n    setTimeout(() => {\n      setBtnColor('white');\n      if (nextQuestion < quizCards.length) {\n        setCurrentQuestion(currentQuestion + 1);\n      } else {\n        setShowScore(true);\n      }\n    }, 1000);\n  };\n\n  return (\n    <div className='div-answer-choice py-3'>\n      <button\n        onClick={changeQuestion}\n        style={{ backgroundColor: btnColor }}\n        className='btn btn-answer-choice py-0 px-0'\n      >\n        {/* <h2 className=\"float-left\">{letterChoice}</h2>\n            <h2>{ansOption}</h2>         */}\n        <Row>\n          <Col\n            xs={2}\n  \n          >\n              <div className=\"letter-choice d-flex justify-content-center align-items-center\"\n              style={{backgroundColor: letterBgCol}}>\n              {letterChoice}\n              </div>\n           \n          </Col>\n          <Col \n            xs={10}\n            className='btn-column py-2'\n          >\n            {ansOption}\n          </Col>\n        </Row>\n      </button>\n    </div>\n  );\n}\n\nexport default QuizTakerCards;\n","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/take_quiz/quizTakerName.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":9,"column":8,"nodeType":"78","messageId":"79","endLine":9,"endColumn":22},{"ruleId":"80","severity":1,"message":"81","line":37,"column":6,"nodeType":"82","endLine":37,"endColumn":52,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":43,"column":17,"nodeType":"86","messageId":"87","endLine":43,"endColumn":19},{"ruleId":"84","severity":1,"message":"85","line":56,"column":23,"nodeType":"86","messageId":"87","endLine":56,"endColumn":25},{"ruleId":"72","replacedBy":"88"},{"ruleId":"74","replacedBy":"89"},{"ruleId":"76","severity":1,"message":"90","line":11,"column":21,"nodeType":"78","messageId":"79","endLine":11,"endColumn":33},{"ruleId":"76","severity":1,"message":"91","line":99,"column":9,"nodeType":"78","messageId":"79","endLine":99,"endColumn":16},{"ruleId":"80","severity":1,"message":"92","line":117,"column":6,"nodeType":"82","endLine":117,"endColumn":8,"suggestions":"93"},{"ruleId":"84","severity":1,"message":"85","line":123,"column":16,"nodeType":"86","messageId":"87","endLine":123,"endColumn":18},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'QuizTakerCards' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'questionNumber' and 'setQuizInfo'. Either include them or remove the dependency array. If 'setQuizInfo' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["96"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["94"],["95"],"'setQuizCards' is assigned a value but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id' and 'numToLetter'. Either include them or remove the dependency array. If 'setLetterChoice' needs the current value of 'id', you can also switch to useReducer instead of useState and read 'id' in the reducer.",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [bgColor, question, correctAnswer, ansOptions, setQuizInfo, questionNumber]",{"range":"102","text":"103"},"Update the dependencies array to be: [id, numToLetter]",{"range":"104","text":"105"},[993,1039],"[bgColor, question, correctAnswer, ansOptions, setQuizInfo, questionNumber]",[3579,3581],"[id, numToLetter]"]
[{"/Users/tiffanyyelle/src/Project3/client/src/index.js":"1","/Users/tiffanyyelle/src/Project3/client/src/reportWebVitals.js":"2","/Users/tiffanyyelle/src/Project3/client/src/App.js":"3","/Users/tiffanyyelle/src/Project3/client/src/components/Hero/hero.js":"4","/Users/tiffanyyelle/src/Project3/client/src/components/Invite/invite.js":"5","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/allcards.js":"6","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/card.js":"7","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/question/question.js":"8","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/question/questionDropdown.js":"9","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/answer/ansOption.js":"10","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/answer/addAns.js":"11","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/take_quiz/quizTakerCards.js":"12","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/take_quiz/quizTakerName.js":"13","/Users/tiffanyyelle/src/Project3/client/src/components/Results/results.js":"14","/Users/tiffanyyelle/src/Project3/client/src/components/Results/myResults.js":"15","/Users/tiffanyyelle/src/Project3/client/src/components/Results/myresults.js":"16"},{"size":500,"mtime":1607375890745,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1607375890747,"results":"19","hashOfConfig":"18"},{"size":9676,"mtime":1607748257732,"results":"20","hashOfConfig":"18"},{"size":1236,"mtime":1607743825569,"results":"21","hashOfConfig":"18"},{"size":1104,"mtime":1607915857502,"results":"22","hashOfConfig":"18"},{"size":7874,"mtime":1607913707410,"results":"23","hashOfConfig":"18"},{"size":8162,"mtime":1607909897552,"results":"24","hashOfConfig":"18"},{"size":819,"mtime":1607893070094,"results":"25","hashOfConfig":"18"},{"size":1490,"mtime":1607893467056,"results":"26","hashOfConfig":"18"},{"size":6493,"mtime":1607911246190,"results":"27","hashOfConfig":"18"},{"size":736,"mtime":1607909402719,"results":"28","hashOfConfig":"18"},{"size":4718,"mtime":1607919314170,"results":"29","hashOfConfig":"18"},{"size":2029,"mtime":1607891849986,"results":"30","hashOfConfig":"18"},{"size":1959,"mtime":1607915789693,"results":"31","hashOfConfig":"18"},{"size":1276,"mtime":1607746585759,"results":"32","hashOfConfig":"18"},{"size":3381,"mtime":1607836357041,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"2kkxo5",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/tiffanyyelle/src/Project3/client/src/index.js",[],["71","72"],"/Users/tiffanyyelle/src/Project3/client/src/reportWebVitals.js",[],"/Users/tiffanyyelle/src/Project3/client/src/App.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Hero/hero.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Invite/invite.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/allcards.js",["73"],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/card.js",["74"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport './card.css';\nimport AnsOption from './answer/ansOption';\nimport AddAnswer from './answer/addAns';\nimport Question from './question/question';\nimport QuestionDropdown from './question/questionDropdown';\n\nfunction Card({\n  quizInfo,\n  setQuizInfo,\n  defaultQ,\n  defaultA,\n  cardColor,\n  cardNumber\n}) {\n\n\n  const [question, setQuestion] = useState(defaultQ);\n  const [customQ, setCustomQ] = useState(false);\n  const [ansOptions, setAnsOptions] = useState(defaultA);\n  const [bgColor, setBgColor] = useState(cardColor);\n  const [correctAnswer, setCorrectAnswer] = useState('');\n\n  const colors = [\n    '#FF9AA2',\n    '#FFB7B2',\n    '#FFB347',\n    '#FFDAC1',\n    '#B5EAD7',\n    '#E2F0CB',\n    '#85E3FF',\n    '#ACE7FF',\n    '#B28DFF',\n    '#97A2FF',\n  ];\n\n  const changeCardColor = (color) => {\n    setBgColor(color);\n    setQuizInfo({\n      ...quizInfo,\n      [cardNumber]: { ...quizInfo[cardNumber], bgColor: color },\n    });\n  };\n\n  return (\n    <Row key={cardNumber} className='mb-5'>\n      <Col key={cardNumber}>\n        <div\n          key={cardNumber}\n          className='card'\n          style={{ backgroundColor: bgColor }}\n        >\n          <div className='card-content'>\n            {/* Question Components */}\n            <div className='question mb-2'>\n              {/* Question input field */}\n              <Question\n                quizInfo={quizInfo}\n                question={question}\n                setQuizInfo={setQuizInfo}\n                setQuestion={setQuestion}\n                customQ={customQ}\n                setAnsOptions={setAnsOptions}\n                cardNumber={cardNumber}\n              />\n              {/* Additional Question Options/Dropdown */}\n              <QuestionDropdown\n                quizInfo={quizInfo}\n                setQuestion={setQuestion}\n                setAnsOptions={setAnsOptions}\n                setCustomQ={setCustomQ}\n                setQuizInfo={setQuizInfo}\n                cardNumber={cardNumber}\n              />\n            </div>\n            <div>\n              {Object.keys(ansOptions).map((num, i) => (\n                <AnsOption\n                  key={num}\n                  ansChoice={ansOptions[num]}\n                  ansOptions={ansOptions}\n                  ansNum={num}\n                  setAnsOptions={setAnsOptions}\n                  cardNumber={cardNumber}\n                  quizInfo={quizInfo}\n                  setQuizInfo={setQuizInfo}\n                  correctAnswer={correctAnswer}\n                  setCorrectAnswer={setCorrectAnswer}\n                />\n              ))}\n              {Object.keys(ansOptions).length < 6 ? (\n                <AddAnswer\n                  setAnsOptions={setAnsOptions}\n                  cardNumber={cardNumber}\n                  quizInfo={quizInfo}\n                  setQuizInfo={setQuizInfo}\n                  ansOptions={ansOptions}\n                />\n              ) : null}\n            </div>\n\n            {/* Change card background color */}\n            <div className='mt-2 d-flex justify-content-center'>\n              {colors.map((color) => (\n                <div\n                  className='btn pick-a-color mr-1'\n                  style={{ backgroundColor: color }}\n                  onClick={() => changeCardColor(color)}\n                ></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </Col>\n    </Row>\n  );\n}\n\n//    {/* Answer Components */}\n//    <div>\n//    {/* Answer Options */}\n//    {console.log('LIST OF ANS OPTIONS', ansOptions)}\n//    {ansOptions.map((ansOption, i) => (\n//     <AnsOption\n//       key={i}\n//       ansNum={i+1}\n//       ansChoice={ansOption}\n//       ansOptions={ansOptions}\n//       setAnsOptions={setAnsOptions}\n//       quizInfo={quizInfo}\n//       setQuizInfo={setQuizInfo}\n//       cardNumber={cardNumber}\n//     />\n//   ))}\n//   {/* Add Answer Option */}\n//   {ansOptions.length < 6 ? (\n//     <AddAnswer\n//       ansOptions={ansOptions}\n//       setAnsOptions={setAnsOptions}\n//     />\n//   ) : null}\n// </div>\n\n// setQuizInfo( { ...quizInfo, 7: {...quizInfo[7], [variableNmae]: value} } )\n\n// function Card({\n//   questionNumber,\n//   quizInfo,\n//   setQuizInfo,\n//   defaultQ,\n//   defaultA,\n//   cardColor\n// }) {\n//   const [question, setQuestion] = useState(defaultQ);\n//   const [customQ, setCustomQ] = useState(false);\n//   const [ansOptions, setAnsOptions] = useState(defaultA);\n//   const [correctAnswer, setCorrectAnswer] = useState('');\n//   const [bgColor, setBgColor] = useState(cardColor);\n\n//   //setQuizInfo( { ...quizInfo, 7: {...quizInfo[7], [variableNmae]: value} } )\n\n//   useEffect(() => {\n//     setQuizInfo((quizInfo) => [\n//       ...quizInfo\n//     ]);\n//   }, [bgColor, correctAnswer, ansOptions, question]);\n\n//   //setQuizInfo( { ...quizInfo, 7: {...quizInfo[7], [variableNmae]: value} } )\n\n//   const changeCardColor = (color) => {\n//     setBgColor(color);\n\n//     let updateBgColor = quizInfo.map((card, i) => {\n//       if (i + 1 == questionNumber) {\n//         return { ...card, bgColor: color };\n//       } else {\n//         return card;\n//       }\n//     });\n//     setQuizInfo(updateBgColor);\n//   };\n\n//   return (\n//     <Row key={questionNumber} className='mb-5'>\n//       <Col>\n//         <div className='card' style={{ backgroundColor: bgColor }}>\n//           <div className='card-content'>\n//             <h2 className='font-weight-bold'>QUESTION {questionNumber}</h2>\n//             {/* Question Components */}\n//             <div className='question mb-2'>\n//               {/* Question input field */}\n//               <Question\n//                 question={question}\n//                 setQuestion={setQuestion}\n//                 customQ={customQ}\n//                 setAnsOptions={setAnsOptions}\n//               />\n//               {/* Additional Question Options/Dropdown */}\n//               <QuestionDropdown\n//                 quizInfo={quizInfo}\n//                 setQuestion={setQuestion}\n//                 setAnsOptions={setAnsOptions}\n//                 setCustomQ={setCustomQ}\n//               />\n//             </div>\n\n//             {/* Answer Components */}\n//             <div>\n//               {/* Answer Options */}\n//               {/* {console.log('LIST OF ANS OPTIONS', ansOptions)} */}\n//               {ansOptions.map((ansOption, i) => (\n//                 <AnsOption\n//                   key={i}\n//                   id={i}\n//                   ansOption={ansOption}\n//                   ansOptions={ansOptions}\n//                   setAnsOptions={setAnsOptions}\n//                   correctAnswer={correctAnswer}\n//                   setCorrectAnswer={setCorrectAnswer}\n//                   questionNumber={questionNumber}\n//                   quizInfo={quizInfo}\n//                   setQuizInfo={setQuizInfo}\n//                   correctAnswer={correctAnswer}\n//                   questionNumber={questionNumber}\n//                 />\n//               ))}\n//               {/* Add Answer Option */}\n//               {ansOptions.length < 6 ? (\n//                 <AddAnswer\n//                   ansOptions={ansOptions}\n//                   setAnsOptions={setAnsOptions}\n//                 />\n//               ) : null}\n//             </div>\n\n//             {/* Change card background color */}\n//             <div className='mt-2 d-flex justify-content-center'>\n//               {[\n//                 '#FF9AA2',\n//                 '#FFB7B2',\n//                 '#FFB347',\n//                 '#FFDAC1',\n//                 '#B5EAD7',\n//                 '#E2F0CB',\n//                 '#85E3FF',\n//                 '#ACE7FF',\n//                 '#B28DFF',\n//                 '#97A2FF',\n//               ].map((color) => (\n//                 <div\n//                   className='btn pick-a-color mr-1'\n//                   style={{ backgroundColor: color }}\n//                   onClick={() => changeCardColor(color)}\n//                 ></div>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//       </Col>\n//     </Row>\n//   );\n// }\n\nexport default Card;\n","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/question/question.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/question/questionDropdown.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/answer/ansOption.js",["75","76"],"import React, { useEffect, useState } from 'react';\nimport { Form } from 'react-bootstrap';\nimport './ansOption.css';\n\nfunction AnsOption({\n  ansNum,\n  ansChoice,\n  setAnsOptions,\n  ansOptions,\n  cardNumber,\n  setQuizInfo,\n  quizInfo,\n  correctAnswer,\n  setCorrectAnswer,\n}) {\n  const rmvAnswer = (e) => {\n    e.preventDefault();\n\n    console.log('wjats in ansoptions', ansOptions);\n\n    let ansOptionTemp = { ...ansOptions };\n    delete ansOptionTemp[ansNum];\n    setAnsOptions(ansOptionTemp);\n\n    setQuizInfo({\n      ...quizInfo,\n      [cardNumber]: {\n        ...quizInfo[cardNumber],\n        ansOptions: ansOptionTemp,\n      },\n    });\n  };\n\n  return (\n    <Form>\n      <div className='answer-choice d-flex justify-content-center align-items-center'>\n        <input \n          type='radio'\n          id={ansNum}\n          name='answer_options'\n          value={ansChoice}\n          className='mr-1'\n          onChange={() => {\n            setCorrectAnswer(ansNum);\n            setQuizInfo({\n              ...quizInfo,\n              [cardNumber]: { ...quizInfo[cardNumber], correctAnswer: ansNum },\n            });\n          }}\n          required/>\n        <label htmlFor='answer-option' className='my-0 mr-2'>\n          <textarea\n            rows='2'\n            className='answer-option'\n            value={ansChoice}\n            onChange={(e) => {\n              e.preventDefault();\n\n              setAnsOptions({ ...ansOptions, [ansNum]: e.target.value });\n\n              setQuizInfo({\n                ...quizInfo,\n                [cardNumber]: {\n                  ...quizInfo[cardNumber],\n                  ansOptions: { ...ansOptions, [ansNum]: e.target.value },\n                },\n              });\n            }}\n          ></textarea>\n        </label>\n\n        <button className='btn' onClick={rmvAnswer}>\n          <i className='fas fa-times' style={{ color: 'white' }}></i>\n        </button>\n      </div>\n    </Form>\n  );\n}\n\nexport default AnsOption;\n\n// function AnsOption({\n//   ansNum,\n//   ansChoice,\n//   setAnsOptions,\n//   ansOptions,\n//   setQuizInfo,\n//   quizInfo,\n//   cardNumber,\n// }) {\n//   const [correctAnswer, setCorrectAnswer] = useState('');\n\n//   const rmvAnswer = (e) => {\n//     e.preventDefault();\n//     const newAnsOptions = ansOptions.filter((ans, i) => i !== ansNum - 1);\n//     setAnsOptions(newAnsOptions);\n\n//     setQuizInfo({\n//       ...quizInfo,\n//       [cardNumber]: {\n//         ...quizInfo[cardNumber],\n//         ansOptions: newAnsOptions,\n//       },\n//     });\n//   };\n\n//   return (\n//     <div className='answer-choice d-flex justify-content-center align-items-center'>\n//       <input\n//         type='radio'\n//         id={ansNum}\n//         name='answer_options'\n//         value={ansChoice}\n//         className='mr-1'\n//         onClick={() => {\n//           setCorrectAnswer(ansNum);\n//           setQuizInfo({\n//             ...quizInfo,\n//             [cardNumber]: { ...quizInfo[cardNumber], correctAnswer: ansNum },\n//           });\n//         }}\n//         required\n//       />\n//       <label htmlFor='answer-option' className='my-0 mr-2'>\n//         <textarea\n//           rows='2'\n//           className='answer-option'\n//           value={ansChoice}\n//           onChange={(e) => {\n\n//             const filterAns = ansOptions.filter((ans, i) => i+1 != ansNum);\n//             console.log(filterAns,' whats il infilter ans') //b,c,d\n\n//             let changeAns = ansOptions.map((ans, i) => {\n//               if (i + 1 == ansNum) {\n//                 return [e.target.value];\n//               } else {\n//                 return [...ans];\n//               }\n//             });\n\n//             // setAnsOptions([...ansOptions, e.target.value]);\n//             setAnsOptions([changeAns])\n\n//             // setQuizInfo({\n//             //   ...quizInfo,\n//             //   [cardNumber]: {\n//             //     ...quizInfo[cardNumber],\n//             //     ansOptions: [...ansOptions, e.target.value],\n//             //   },\n//             // });\n//           }}\n//         ></textarea>\n//       </label>\n\n//       <button className='btn' onClick={rmvAnswer}>\n//         <i className='fas fa-times' style={{ color: 'white' }}></i>\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default AnsOption;\n\n// function AnsOption({\n//   optionNum,\n//   ansOption,\n//   setAnsOptions,\n//   ansOptions,\n//   cardNumber,\n//   setCorrectAnswer,\n//   setQuizInfo,\n//   quizInfo,\n//   correctAnswer,\n// }) {\n//   const [ansText, setAnsText] = useState();\n\n//   useEffect(() => {\n//     setAnsText(ansOption);\n//   }, [ansOption]);\n\n//   const rmvAnswer = (e) => {\n//     e.preventDefault();\n//     const newAnsOptions = ansOptions.filter((ans, i) => i !== optionNum);\n//     setAnsOptions(newAnsOptions);\n\n//     setQuizInfo({\n//       ...quizInfo,\n//       [cardNumber]: {\n//         ...quizInfo[cardNumber],\n//         ansOptions: newAnsOptions\n//       },\n//     });\n\n//   };\n\n//   return (\n//     <div className='answer-choice d-flex justify-content-center align-items-center'>\n//       <input\n//         type='radio'\n//         id={optionNum}\n//         name='answer_options'\n//         value={ansText}\n//         className='mr-1'\n//         onClick={() => {\n//           setCorrectAnswer(optionNum);\n//           setQuizInfo({\n//             ...quizInfo,\n//             [cardNumber]: { ...quizInfo[cardNumber], correctAnswer: optionNum },\n//           });\n//         }}\n//         required\n//       />\n//       <label htmlFor='answer-option' className='my-0 mr-2'>\n//         <textarea\n//           rows='2'\n//           className='answer-option'\n//           value={ansText}\n//           onChange={(e) => {\n//             setAnsText(e.target.value);\n\n//             setQuizInfo({\n//               ...quizInfo,\n//               [cardNumber]: {\n//                 ...quizInfo[cardNumber],\n//                 ansOptions: [...ansOptions, e.target.value]\n//               },\n//             });\n\n//           }}\n//         ></textarea>\n//       </label>\n\n//       <button className='btn' onClick={rmvAnswer}>\n//         <i className='fas fa-times' style={{ color: 'white' }}></i>\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default AnsOption;\n\n// let updatedAnsOptions = ansOptions.map((ansOption, i) => {\n//   if (i == id) {\n//     console.log('WHTS IN ANS OPTION', ansOption);\n//     return (ansOption = e.target.value);\n//   } else {\n//     return ansOption;\n//   }\n// });\n// setAnsOptions(updatedAnsOptions);\n","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/answer/addAns.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/take_quiz/quizTakerCards.js",["77","78","79"],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/take_quiz/quizTakerName.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Results/results.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Results/myResults.js",["80","81","82","83"],"import './myresults.css';\nimport axios from 'axios';\nimport React, { useState } from 'react';\nfunction MyResults() {\n  const [roomCode, setRoomCode] = useState('');\n  const [pin, setPin] = useState('');\n  const [showResults, setShowResults] = useState(false);\n\n  const handleResults = (e) => {\n    e.preventDefault();\n    // axios.post('url', config, body)\n  };\n\n  return (\n    <React.Fragment>\n      {showResults ? (\n        <div>hi </div>\n      ) : (\n        <div className='my-results-prompt'>\n          <h1 className='who-is-my-bff'>Who is my BFF?</h1>\n          <form onSubmit={handleResults}>\n            <div className='results-input d-flex flex-column'>\n              <input\n                type='text'\n                className='code-input'\n                placeholder='Room code'\n                value={roomCode}\n              ></input>\n              <input\n                type='text'\n                className='pin-input'\n                placeholder='Pin'\n                value={pin}\n              ></input>\n              <br />\n              <button type='submit' className='btn btn-blue'>\n                Let's find out!\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default MyResults;\n",["84","85"],"/Users/tiffanyyelle/src/Project3/client/src/components/Results/myresults.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":148,"column":1,"nodeType":"92","messageId":"93","endLine":160,"endColumn":2},{"ruleId":"94","severity":1,"message":"95","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":26},{"ruleId":"94","severity":1,"message":"95","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":26},{"ruleId":"94","severity":1,"message":"98","line":1,"column":28,"nodeType":"96","messageId":"97","endLine":1,"endColumn":36},{"ruleId":"99","severity":1,"message":"100","line":40,"column":6,"nodeType":"101","endLine":40,"endColumn":19,"suggestions":"102"},{"ruleId":"99","severity":1,"message":"103","line":115,"column":6,"nodeType":"101","endLine":115,"endColumn":8,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":119,"column":16,"nodeType":"107","messageId":"108","endLine":119,"endColumn":18},{"ruleId":"94","severity":1,"message":"109","line":2,"column":8,"nodeType":"96","messageId":"97","endLine":2,"endColumn":13},{"ruleId":"94","severity":1,"message":"110","line":5,"column":20,"nodeType":"96","messageId":"97","endLine":5,"endColumn":31},{"ruleId":"94","severity":1,"message":"111","line":6,"column":15,"nodeType":"96","messageId":"97","endLine":6,"endColumn":21},{"ruleId":"94","severity":1,"message":"112","line":7,"column":23,"nodeType":"96","messageId":"97","endLine":7,"endColumn":37},{"ruleId":"86","replacedBy":"113"},{"ruleId":"88","replacedBy":"114"},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'match.params.quizId', 'name', 'quizOwner', and 'score'. Either include them or remove the dependency array.","ArrayExpression",["117"],"React Hook useEffect has missing dependencies: 'id' and 'numToLetter'. Either include them or remove the dependency array. If 'setLetterChoice' needs the current value of 'id', you can also switch to useReducer instead of useState and read 'id' in the reducer.",["118"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'axios' is defined but never used.","'setRoomCode' is assigned a value but never used.","'setPin' is assigned a value but never used.","'setShowResults' is assigned a value but never used.",["115"],["116"],"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [history, match.params.quizId, name, quizOwner, score, showResults]",{"range":"123","text":"124"},"Update the dependencies array to be: [id, numToLetter]",{"range":"125","text":"126"},[1141,1154],"[history, match.params.quizId, name, quizOwner, score, showResults]",[3463,3465],"[id, numToLetter]"]
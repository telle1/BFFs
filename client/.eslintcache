[{"/Users/tiffanyyelle/src/Project3/client/src/index.js":"1","/Users/tiffanyyelle/src/Project3/client/src/reportWebVitals.js":"2","/Users/tiffanyyelle/src/Project3/client/src/App.js":"3","/Users/tiffanyyelle/src/Project3/client/src/components/Hero/hero.js":"4","/Users/tiffanyyelle/src/Project3/client/src/components/Invite/invite.js":"5","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/allcards.js":"6","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/card.js":"7","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/question/question.js":"8","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/question/questionDropdown.js":"9","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/answer/ansOption.js":"10","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/answer/addAns.js":"11","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/take_quiz/quizTakerCards.js":"12","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/take_quiz/quizTakerName.js":"13","/Users/tiffanyyelle/src/Project3/client/src/components/Results/results.js":"14","/Users/tiffanyyelle/src/Project3/client/src/components/Results/myResults.js":"15","/Users/tiffanyyelle/src/Project3/client/src/components/Results/myresults.js":"16"},{"size":500,"mtime":1607375890745,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1607375890747,"results":"19","hashOfConfig":"18"},{"size":9676,"mtime":1607748257732,"results":"20","hashOfConfig":"18"},{"size":1236,"mtime":1607743825569,"results":"21","hashOfConfig":"18"},{"size":941,"mtime":1607829066695,"results":"22","hashOfConfig":"18"},{"size":4199,"mtime":1607733555571,"results":"23","hashOfConfig":"18"},{"size":4056,"mtime":1607723242385,"results":"24","hashOfConfig":"18"},{"size":599,"mtime":1607460561643,"results":"25","hashOfConfig":"18"},{"size":1208,"mtime":1607460606840,"results":"26","hashOfConfig":"18"},{"size":2013,"mtime":1607629844430,"results":"27","hashOfConfig":"18"},{"size":346,"mtime":1607459508402,"results":"28","hashOfConfig":"18"},{"size":4486,"mtime":1607815625011,"results":"29","hashOfConfig":"18"},{"size":2024,"mtime":1607811473414,"results":"30","hashOfConfig":"18"},{"size":1652,"mtime":1607828342213,"results":"31","hashOfConfig":"18"},{"size":1276,"mtime":1607746585759,"results":"32","hashOfConfig":"18"},{"size":3509,"mtime":1607835079823,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"2kkxo5",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tiffanyyelle/src/Project3/client/src/index.js",[],["75","76"],"/Users/tiffanyyelle/src/Project3/client/src/reportWebVitals.js",[],"/Users/tiffanyyelle/src/Project3/client/src/App.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Hero/hero.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Invite/invite.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/allcards.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/card.js",["77","78","79"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport './card.css';\nimport AnsOption from './answer/ansOption';\nimport AddAnswer from './answer/addAns';\nimport Question from './question/question';\nimport QuestionDropdown from './question/questionDropdown';\n\nfunction Card({\n  questionNumber,\n  cardColor,\n  premadeQuestions,\n  defaultQ,\n  defaultA,\n  quizInfo,\n  setQuizInfo,\n}) {\n  const [question, setQuestion] = useState(defaultQ);\n  const [customQ, setCustomQ] = useState(false);\n  const [ansOptions, setAnsOptions] = useState(defaultA);\n  const [correctAnswer, setCorrectAnswer] = useState(\"\")\n  const [bgColor, setBgColor] = useState(cardColor);\n\n  useEffect(() => {\n    setQuizInfo((quizInfo) => [\n      ...quizInfo,\n      {\n        number: questionNumber,\n        bgColor: bgColor,\n        question: question,\n        correctAnswer: correctAnswer,\n        answerOptions: ansOptions,\n      },\n    ]);\n  }, [bgColor, correctAnswer, ansOptions, question]);\n  \n\n  const changeCardColor = (color) => {\n    setBgColor(color);\n  };\n\n  return (\n    <Row key={questionNumber} className='mb-5'>\n      <Col>\n        <div className='card' style={{ backgroundColor: bgColor }}>\n          <div className='card-content'>\n            <h2 className='font-weight-bold'>QUESTION {questionNumber}</h2>\n            {/* Question Components */}\n            <div className='question mb-2'>\n              {/* Question input field */}\n              <Question\n                question={question}\n                setQuestion={setQuestion}\n                customQ={customQ}\n                setAnsOptions={setAnsOptions}\n              />\n              {/* Additional Question Options/Dropdown */}\n              <QuestionDropdown\n                premadeQuestions={premadeQuestions}\n                setQuestion={setQuestion}\n                setAnsOptions={setAnsOptions}\n                setCustomQ={setCustomQ}\n              />\n            </div>\n\n            {/* Answer Components */}\n            <div>\n              {/* Answer Options */}\n              {/* {console.log('LIST OF ANS OPTIONS', ansOptions)} */}\n              {ansOptions.map((ansOption, i) => (\n                <AnsOption\n                  key={i}\n                  id={i}\n                  ansOption={ansOption}\n                  ansOptions={ansOptions}\n                  setAnsOptions={setAnsOptions}\n                  correctAnswer={correctAnswer}\n                  setCorrectAnswer={setCorrectAnswer}\n                  questionNumber={questionNumber}\n                  quizInfo={quizInfo}\n                  setQuizInfo={setQuizInfo}\n                  correctAnswer={correctAnswer}\n                  questionNumber={questionNumber}\n                />\n\n              ))}\n              {/* Add Answer Option */}\n              {ansOptions.length < 6 ? (\n                <AddAnswer\n                  ansOptions={ansOptions}\n                  setAnsOptions={setAnsOptions}\n                />\n              ) : null}\n            </div>\n\n            {/* Change card background color */}\n            <div className='mt-2 d-flex justify-content-center'>\n              {[\n                '#FF9AA2',\n                '#FFB7B2',\n                '#FFB347',\n                '#FFDAC1',\n                '#B5EAD7',\n                '#E2F0CB',\n                '#85E3FF',\n                '#ACE7FF',\n                '#B28DFF',\n                '#97A2FF',\n              ].map((color) => (\n                <div\n                  className='btn pick-a-color mr-1'\n                  style={{ backgroundColor: color }}\n                  onClick={() => changeCardColor(color)}\n                ></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </Col>\n    </Row>\n  );\n}\n\nexport default Card;\n\n//    // let updateBgColor = quizInfo.map((questionInfo, i) => {\n    //   if (i + 1 == questionNumber) {\n    //     return { ...questionInfo, bgColor: color};\n    //   } else {\n    //     return questionInfo;\n    //   }\n    // });\n    // setQuizInfo(updateBgColor);\n","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/question/question.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/question/questionDropdown.js",[],["80","81"],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/answer/ansOption.js",["82"],"import React, { useEffect, useState } from 'react';\nimport './ansOption.css';\n\nfunction AnsOption({\n  id,\n  ansOption,\n  setAnsOptions,\n  ansOptions, questionNumber,\n  setCorrectAnswer,\n  setQuizInfo, quizInfo,\n  correctAnswer,\n}) {\n  const [ansText, setAnsText] = useState();\n  useEffect(() => {\n    setAnsText(ansOption);\n  }, [ansOption]);\n\n  const rmvAnswer = (e) => {\n    e.preventDefault();\n    const newAnsOptions = ansOptions.filter((ans, i) => i !== id);\n    setAnsOptions(newAnsOptions);\n  };\n\n  return (\n    <div className='answer-choice d-flex justify-content-center align-items-center'>\n      <input\n        key={id}\n        type='radio'\n        id={id}\n        name='answer_options'\n        value={ansText}\n        className='mr-1'\n        onClick={() => {\n          setCorrectAnswer(id + 1);\n        //   let updateCorrectAns = quizInfo.map((questionInfo, i) => {\n        //      if (i + 1 == questionNumber){\n        //       return {...questionInfo, correctAnswer: correctAnswer};\n        //       } else {\n        //         return questionInfo\n        //       }\n        // })\n        // setQuizInfo(updateCorrectAns)\n      }}\n        required\n      />\n      <label htmlFor='answer-option' className='my-0 mr-2'>\n        <textarea\n          rows='2'\n          className='answer-option'\n          value={ansText}\n          onChange={(e) => {\n            setAnsText(e.target.value);\n\n            let updatedAnsOptions = ansOptions.map((ansOption, i) => {\n              if (i == id) {\n                console.log('WHTS IN ANS OPTION', ansOption);\n                return (ansOption = e.target.value);\n              } else {\n                return ansOption;\n              }\n            });\n            setAnsOptions(updatedAnsOptions);\n          }} //setAnsOptions(e.target.value)\n        ></textarea>\n      </label>\n\n      <button className='btn' onClick={rmvAnswer}>\n        <i className='fas fa-times' style={{ color: 'white' }}></i>\n      </button>\n    </div>\n  );\n}\n\nexport default AnsOption;\n","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/create_quiz/answer/addAns.js",[],"/Users/tiffanyyelle/src/Project3/client/src/components/Cards/take_quiz/quizTakerCards.js",["83","84","85"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Row, Col } from 'react-bootstrap';\nimport './quizTakerCards.css';\nimport axios from 'axios';\n\nfunction QuizTakerCards({ name, match, quizCards, quizOwner }) {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (showResults) {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      const body = JSON.stringify({\n        name: name,\n        score: score,\n      });\n\n      axios\n        .post(`/api/results/${match.params.quizId}`, body, config) // change to paramsId\n        .then((res) => {\n          history.push({\n            pathname: `/results/${match.params.quizId}`,\n            state: { allResults: res.data.allResults, friendScore: score, quizOwner: quizOwner },\n          });\n        });\n    }\n  }, [showResults]); //so that score is not one state behind\n\n  return (\n    <React.Fragment>\n      <h1 className='how-well-header mt-3'>\n        How well do you know {quizOwner}, {name}?\n      </h1>\n      {quizCards.length > 0 ? (\n        <Row key={quizCards.questionNumber} className='mb-5 mt-4'>\n          <Col>\n            <div\n              className='card'\n              style={{ backgroundColor: quizCards[currentQuestion].bgColor }}\n            >\n              <div className='card-content'>\n                <h2 className='font-weight-bold'>\n                  QUESTION {quizCards[currentQuestion].number}\n                </h2>\n                {/* Question */}\n                <h4 className='question mb-2'>\n                  {quizCards[currentQuestion].question}\n                </h4>\n\n                <div>\n                  {/* Answer Options */}\n                  {quizCards[currentQuestion].answerOptions.map(\n                    (ansOption, i) => (\n                      <AnsOption\n                        key={i}\n                        id={i}\n                        ansOption={ansOption}\n                        currentQuestion={currentQuestion}\n                        setCurrentQuestion={setCurrentQuestion}\n                        quizCards={quizCards}\n                        setScore={setScore}\n                        setShowResults={setShowResults}\n                      />\n                    )\n                  )}\n                </div>\n              </div>\n            </div>\n          </Col>\n        </Row>\n      ) : null}\n    </React.Fragment>\n  );\n}\n\nfunction AnsOption({\n  ansOption,\n  id,\n  currentQuestion,\n  setCurrentQuestion,\n  quizCards,\n  setScore,\n  setShowResults,\n}) {\n  const [btnColor, setBtnColor] = useState('white');\n  const [letterChoice, setLetterChoice] = useState('');\n  const [letterBgCol, setLetterBgCol] = useState('');\n\n  let numToLetter = {\n    0: { letter: 'A', bgColor: '#FFB7B2' },\n    1: { letter: 'B', bgColor: '#FFDAC1' },\n    2: { letter: 'C', bgColor: '#F8F9CA' },\n    3: { letter: 'D', bgColor: '#B5EAD7' },\n    4: { letter: 'E', bgColor: '#C7CEEA' },\n    5: { letter: 'F', bgColor: '#FF9AA2' },\n  };\n\n  useEffect(() => {\n    setLetterChoice(numToLetter[String(id)].letter);\n    setLetterBgCol(numToLetter[String(id)].bgColor);\n  }, []);\n\n  const changeQuestion = () => {\n    const nextQuestion = currentQuestion + 1;\n    if (id + 1 == quizCards[currentQuestion].correctAnswer) {\n      setScore((score) => score + 1);\n      setBtnColor('#90ee90');\n    } else {\n      setBtnColor('#ff3232');\n    }\n\n    setTimeout(() => {\n      setBtnColor('white');\n      if (nextQuestion < quizCards.length) {\n        setCurrentQuestion(currentQuestion + 1);\n      } else {\n        setShowResults(true);\n      }\n    }, 1000);\n  };\n\n  return (\n    <div className='div-answer-choice py-3'>\n      <button\n        onClick={() => changeQuestion()}\n        style={{ backgroundColor: btnColor }}\n        className='btn btn-answer-choice py-0 px-0'\n      >\n        <Row>\n          <Col xs={2}>\n            <div\n              className='letter-choice d-flex justify-content-center align-items-center'\n              style={{ backgroundColor: letterBgCol }}\n            >\n              {letterChoice}\n            </div>\n          </Col>\n          <Col xs={10} className='btn-column py-2'>\n            {ansOption}\n          </Col>\n        </Row>\n      </button>\n    </div>\n  );\n}\n\nexport default QuizTakerCards;\n\n","/Users/tiffanyyelle/src/Project3/client/src/components/Cards/take_quiz/quizTakerName.js",["86"],"import QuizTakerCards from './quizTakerCards';\nimport './quizTakerName.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n//rendered at /take-quiz/:quizId route\nfunction QuizTakerName({ match }) {\n  const [nameEntered, setNameEntered] = useState(false);\n  const [name, setName] = useState('');\n  const [isValidRC, setIsValidRC] = useState(true);\n\n  const [quizCards, setQuizCards] = useState([]);\n  const [quizOwner, setQuizOwner] = useState('');\n  //check to see if the roomcode is valid\n  useEffect(() => {\n    axios\n      .get(`/api/take-quiz/${match.params.quizId}`)\n      .then((res) => {\n        setQuizCards(res.data.quizInfo);\n        setQuizOwner(res.data.owner);\n      })\n      .catch((error) => {\n        console.log('HERES THE ERROR MSG', error);\n        setIsValidRC(false);\n      });\n  }, []);\n\n  const handleName = (e) => {\n    e.preventDefault();\n    setNameEntered(true);\n  };\n\n  return (\n    <React.Fragment>\n      {isValidRC ? (\n        nameEntered ? (\n          <QuizTakerCards\n            name={name}\n            match={match}\n            quizCards={quizCards}\n            quizOwner={quizOwner}\n          />\n        ) : (\n          <div className='enter-container'>\n            <h1 className='header'>Are you a true friend?</h1>\n            <div className='enter-friend-name'>\n              <input\n                type='text'\n                placeholder='Enter name'\n                className='enter-name-input'\n                valye={name}\n                onChange={(e) => setName(e.target.value)}\n              ></input>\n              <button\n                type='submit'\n                className='btn pink-button'\n                onClick={handleName}\n              >\n                Submit\n              </button>\n            </div>\n          </div>\n        )\n      ) : (\n        <div className='enter-container'>\n          <h1 className='header'>Oops, sorry! Invalid link.</h1>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default QuizTakerName;\n","/Users/tiffanyyelle/src/Project3/client/src/components/Results/results.js",["87","88"],"import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Row, Col, Table } from 'react-bootstrap';\nimport axios from 'axios';\nimport './results.css';\n\nfunction Results() {\n  const [allResults, setAllResults] = useState([]);\n  const [friendScore, setFriendScore] = useState();\n  const location = useLocation();\n\n  useEffect(() => {\n    setAllResults(location.state.allResults);\n    setFriendScore(location.state.friendScore)\n  }, []);\n\n  return (\n    <Row className='result-score'>\n      <Col xs={5} className='friends-score'>\n        <h2 className=\"friends-header\">\n          Your <span className='font-weight-bold'>Score</span>\n        </h2>\n        <div className='circle-score mt-5 mb-5'>\n          <p className=\"big-score\">{friendScore}</p>\n        </div>\n        <p className=\"small-score\">{friendScore} out of 10</p>\n      </Col>\n      <Col xs={7} className='leaderboard'>\n        <h2 className=\"lb-header\"> {location.state.quizOwner}'s <span className=\"font-weight-bold\">BFFs</span></h2>\n        <Table striped className='leaderboard-table'>\n          <tbody>\n          \n            {allResults.map((result, i) => (\n              <ResultRow key={i} result={result} />\n            ))}\n\n\n          </tbody>\n        </Table>\n      </Col>\n    </Row>\n  );\n}\n\nfunction ResultRow({ result }) {\n  return (\n    <React.Fragment>\n      <tr className='table-row'>\n        <td>{result.rank}</td>\n        <td>{result.friendName} </td>\n        <td>\n          <div className=\"lb-score\">\n          {result.score}\n          </div>\n        </td>\n      </tr>\n    </React.Fragment>\n  );\n}\n\nexport default Results;\n","/Users/tiffanyyelle/src/Project3/client/src/components/Results/myResults.js",["89","90","91","92"],"import './myresults.css';\nimport axios from 'axios';\nimport React, { useState } from 'react';\nfunction MyResults() {\n  const [roomCode, setRoomCode] = useState('');\n  const [pin, setPin] = useState('');\n  const [showResults, setShowResults] = useState(false);\n\n  const handleResults = (e) => {\n    e.preventDefault();\n    // axios.post('url', config, body)\n  };\n\n  return (\n    <React.Fragment>\n      {showResults ? (\n        <div>hi </div>\n      ) : (\n        <div className='my-results-prompt'>\n          <h1 className='who-is-my-bff'>Who is my BFF?</h1>\n          <form onSubmit={handleResults}>\n            <div className='results-input d-flex flex-column'>\n              <input\n                type='text'\n                className='code-input'\n                placeholder='Room code'\n                value={roomCode}\n              ></input>\n              <input\n                type='text'\n                className='pin-input'\n                placeholder='Pin'\n                value={pin}\n              ></input>\n              <br />\n              <button type='submit' className='btn btn-blue'>\n                Let's find out!\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default MyResults;\n",["93","94"],"/Users/tiffanyyelle/src/Project3/client/src/components/Results/myresults.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":35,"column":6,"nodeType":"101","endLine":35,"endColumn":52,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":82,"column":19,"nodeType":"105","endLine":82,"endColumn":48},{"ruleId":"103","severity":1,"message":"104","line":83,"column":19,"nodeType":"105","endLine":83,"endColumn":50},{"ruleId":"95","replacedBy":"106"},{"ruleId":"97","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":55,"column":21,"nodeType":"110","messageId":"111","endLine":55,"endColumn":23},{"ruleId":"99","severity":1,"message":"112","line":34,"column":6,"nodeType":"101","endLine":34,"endColumn":19,"suggestions":"113"},{"ruleId":"99","severity":1,"message":"114","line":108,"column":6,"nodeType":"101","endLine":108,"endColumn":8,"suggestions":"115"},{"ruleId":"108","severity":1,"message":"109","line":112,"column":16,"nodeType":"110","messageId":"111","endLine":112,"endColumn":18},{"ruleId":"99","severity":1,"message":"116","line":26,"column":6,"nodeType":"101","endLine":26,"endColumn":8,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":4,"column":8,"nodeType":"120","messageId":"121","endLine":4,"endColumn":13},{"ruleId":"99","severity":1,"message":"122","line":15,"column":6,"nodeType":"101","endLine":15,"endColumn":8,"suggestions":"123"},{"ruleId":"118","severity":1,"message":"119","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":13},{"ruleId":"118","severity":1,"message":"124","line":5,"column":20,"nodeType":"120","messageId":"121","endLine":5,"endColumn":31},{"ruleId":"118","severity":1,"message":"125","line":6,"column":15,"nodeType":"120","messageId":"121","endLine":6,"endColumn":21},{"ruleId":"118","severity":1,"message":"126","line":7,"column":23,"nodeType":"120","messageId":"121","endLine":7,"endColumn":37},{"ruleId":"95","replacedBy":"127"},{"ruleId":"97","replacedBy":"128"},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'questionNumber' and 'setQuizInfo'. Either include them or remove the dependency array. If 'setQuizInfo' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["131"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["129"],["130"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'history', 'match.params.quizId', 'name', 'quizOwner', and 'score'. Either include them or remove the dependency array.",["132"],"React Hook useEffect has missing dependencies: 'id' and 'numToLetter'. Either include them or remove the dependency array. If 'setLetterChoice' needs the current value of 'id', you can also switch to useReducer instead of useState and read 'id' in the reducer.",["133"],"React Hook useEffect has a missing dependency: 'match.params.quizId'. Either include it or remove the dependency array.",["134"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'location.state.allResults' and 'location.state.friendScore'. Either include them or remove the dependency array.",["135"],"'setRoomCode' is assigned a value but never used.","'setPin' is assigned a value but never used.","'setShowResults' is assigned a value but never used.",["129"],["130"],"no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [bgColor, correctAnswer, ansOptions, question, setQuizInfo, questionNumber]",{"range":"146","text":"147"},"Update the dependencies array to be: [history, match.params.quizId, name, quizOwner, score, showResults]",{"range":"148","text":"149"},"Update the dependencies array to be: [id, numToLetter]",{"range":"150","text":"151"},"Update the dependencies array to be: [match.params.quizId]",{"range":"152","text":"153"},"Update the dependencies array to be: [location.state.allResults, location.state.friendScore]",{"range":"154","text":"155"},[962,1008],"[bgColor, correctAnswer, ansOptions, question, setQuizInfo, questionNumber]",[1042,1055],"[history, match.params.quizId, name, quizOwner, score, showResults]",[3334,3336],"[id, numToLetter]",[838,840],"[match.params.quizId]",[481,483],"[location.state.allResults, location.state.friendScore]"]